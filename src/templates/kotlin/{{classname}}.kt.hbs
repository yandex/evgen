/**
 * AUTO-GENERATED FILE. DO NOT MODIFY
 * This class was automatically generated.
 */
/* ktlint-disable */

interface {{classname}}Tracker {
    fun trackEvent(event: String, parameters: Map<String, Any>)
}

interface {{classname}}GlobalParamsProvider {
    fun getGlobalParams(): {{classname}}GlobalParams
}

interface {{classname}}PlatformParamsProvider {
    fun getPlatformParams(): {{classname}}PlatformParams
}

{{#each globalParameters.parameters}}
{{>enum parameter=this}}
{{/each}}
{{#unless (isEmpty globalParameters.parameters)}}
/**
{{#each globalParameters.parameters}}
 * {{@index}}. {{name}} {{#if (isConst type)}}[const] {{/if}}- {{description}}
{{/each}}
 */
{{/unless}}
class {{classname}}GlobalParams(
    {{#each globalParameters.parameters}}
    {{#unless (isConst this.type)}}
    {{camelcase this.name}}: {{typeFormat this~}}
        {{~#if (isDefined this.defaultValue)}} = {{>defaultValueFormat parameter=this}},{{else}},{{/if}}
    {{/unless}}
    {{/each}}
) {
    val parameters: Map<String, Any> = mapOf(
        {{#each globalParameters.parameters}}
        "{{this.name}}" to {{>variableValueFormat parameter=this}},
        {{/each}}
    )
}

{{#if platformParameters}}
{{#each platformParameters.parameters}}
{{>enum parameter=this}}
{{/each}}
{{#unless (isEmpty platformParameters.parameters)}}
/**
{{#each platformParameters.parameters}}
 * {{@index}}. {{name}} {{#if (isConst type)}}[const] {{/if}}- {{description}}
{{/each}}
 */
{{/unless}}
{{/if}}
class {{classname}}PlatformParams(
    {{#each platformParameters.parameters}}
    {{#unless (isConst this.type)}}
    {{camelcase this.name}}: {{typeFormat this~}}
        {{~#if (isDefined this.defaultValue)}} = {{>defaultValueFormat parameter=this}},{{else}},{{/if}}
    {{/unless}}
    {{/each}}
) {
    val parameters: Map<String, Any> = mapOf(
        {{#each platformParameters.parameters}}
        "{{this.name}}" to {{>variableValueFormat parameter=this}},
        {{/each}}
    )
}

class {{classname}}(
    private val eventTracker: {{classname}}Tracker,
    private val globalParamsProvider: {{classname}}GlobalParamsProvider,
    private val platformParamsProvider: {{classname}}PlatformParamsProvider,
) {
    private fun trackEvent(event: String, parameters: MutableMap<String, Any>) {
        val mergedParameters: HashMap<String, Any> = HashMap<String, Any>()
        mergedParameters.putAll(parameters)
        mergedParameters.putAll(globalParamsProvider.getGlobalParams().parameters)
        mergedParameters.putAll(platformParamsProvider.getPlatformParams().parameters)
        eventTracker.trackEvent(event, mergedParameters)
    }

    private fun makeMeta(event_version: Int, interfaces: Map<String, Any>): Map<String, Any> {
        val metaDict = HashMap<String, Any>()
        val eventDict = HashMap<String, Any>()
        eventDict["version"] = event_version
        metaDict["event"] = eventDict
        metaDict["interfaces"] = interfaces
        return metaDict
    }

    {{#filterTruthy this.namedEnums "type.Enum.name"}}
    {{#each this}}
    {{>enum parameter=this}}
    {{/each}}
    {{/filterTruthy}}
    {{#each eventNamespaces}}
    {{#each allVersions}}
    {{#filterFalsy this.parameters "type.Enum.name"}}
    {{#each this}}
    {{>enum parameter=this}}
    {{/each}}
    {{/filterFalsy}}

    {{#unless (isEmpty additionalNamespaces)}}
    enum class {{pascalcase this.name}}Namespaces{{#unless @root.onlyLastVersion}}{{#gt this.version 1}}V{{this.version}}{{/gt}}{{/unless}}(val eventValue: String) {
    {{#each additionalNamespaces}}
        {{pascalcase this}}("{{this}}"),
    {{/each}}
    }

    {{/unless}}
    /**
    {{#each (splitByNewLine description)}}
     *  {{this}}
    {{/each}}
    {{#if comment}}
     *
    {{/if}}
    {{#each (splitByNewLine comment)}}
     *  {{this}}
    {{/each}}
     *
    {{#filterFalsy parameters 'type.Const'}}
    {{#each this}}
     *  {{sum @index 1}}. {{name}} - {{description}}
    {{/each}}
    {{/filterFalsy}}
     */
    fun {{camelcase this.name}}{{#gt this.version 1}}V{{this.version}}{{/gt}}({{#unless (isEmpty additionalNamespaces)}}
        namespace: {{pascalcase this.name}}Namespaces{{#gt this.version 1}}V{{this.version}}{{/gt}},{{/unless}}
        {{#filterUndefined this.parameters 'type.Const'}}
        {{#each this}}
        {{camelcase this.name}}: {{typeFormat this~}}
        {{~#if (isDefined this.defaultValue)}} = {{>defaultValueFormat parameter=this}},{{else}},{{/if}}
        {{/each}}
        {{/filterUndefined}}
    ) {
        val parameters = mutableMapOf<String, Any>()
        {{#each this.parameters}}
        parameters["{{this.name}}"] = {{>variableValueFormat parameter=this}}
        {{~#contains (toArray 'Int' 'Long' 'Double' 'Boolean') (typeFormat this)~}}
            .toString()
        {{~/contains}}

        {{/each}}
        val interfacesDict = HashMap<String, Any>()
        {{#each this.interfaces}}
        val {{camelcase @key}} = HashMap<String, Any>()
        {{camelcase @key}}["version"] = {{this}}
        interfacesDict["{{@key}}"] = {{camelcase @key}}
        {{/each}}
        val _meta = makeMeta({{this.version}}, interfacesDict)
        parameters["_meta"] = _meta
        trackEvent({{#unless (isEmpty additionalNamespaces)}}namespace.toString() + "." + {{/unless}}"{{this.event}}", parameters)
    }

    {{/each}}
    {{/each}}
}
