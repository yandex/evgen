/**
 *  AUTO-GENERATED FILE. DO NOT MODIFY
 *  This class was automatically generated.
 */

import Foundation

public protocol {{classname}}Tracker {
    func trackEvent(_ event: String, withOptions options: [String: Any])
}

public protocol {{classname}}GlobalParamsProvider: AnyObject {
    func getGlobalParams() -> {{classname}}GlobalParams
}

public protocol {{classname}}PlatformParamsProvider: AnyObject {
    func getPlatformParams() -> {{classname}}PlatformParams
}

{{#each globalParameters.parameters}}
{{>enum parameter=this}}
{{/each}}
{{#unless (isEmpty globalParameters.parameters)}}
/**
{{#each globalParameters.parameters}}
 * {{@index}}. {{name}} {{#if (isConst type)}}[const] {{/if}}- {{description}}
{{/each}}
 */
{{/unless}}
public struct {{classname}}GlobalParams {
    {{#each globalParameters.parameters}}
    {{#unless (isConst this.type)}}
    public var {{camelcase this.name}}: {{typeFormat this}}{{#eq this.defaultValue null}}?{{/eq}}
    {{/unless}}
    {{/each}}

    public func makeOptions() -> [String: Any] {
        {{#isEmpty globalParameters.parameters~}}let{{else}}var{{~/isEmpty}} options: [String: Any] = [:]
        {{#each globalParameters.parameters}}
        {{#eq this.type 'Bool'}}
        if {{this.name}} {
            options["{{this.name}}"] = "true"
        } else {
            options["{{this.name}}"] = "false"
        }
        {{else}}
        options["{{this.name}}"] = {{>variableValueFormat parameter=this}}
        {{/eq}}
        {{/each}}
        return options
    }

    public init(
        {{~#each globalParameters.parameters~}}
        {{#unless (isConst this.type)}}
        {{~camelcase this.name}}: {{typeFormat this~}}{{~#eq this.defaultValue null}}?{{/eq~}}
        {{~#if (isDefined this.defaultValue)}} = {{>defaultValueFormat parameter=this}}{{/if~}}
        {{~#unless @last}}, {{/unless~}}
        {{/unless}}
        {{~/each~}}
    ) {
        {{#each globalParameters.parameters}}
        {{#unless (isConst this.type)}}
        self.{{camelcase this.name}} = {{camelcase this.name}}
        {{/unless}}
        {{/each}}
    }
}

{{#if platformParameters}}
{{#each platformParameters.parameters}}
{{>enum parameter=this}}
{{/each}}
{{#unless (isEmpty platformParameters.parameters)}}
/**
{{#each platformParameters.parameters}}
 * {{@index}}. {{name}} {{#if (isConst type)}}[const] {{/if}}- {{description}}
{{/each}}
 */
{{/unless}}
{{/if}}
public struct {{classname}}PlatformParams {
    {{#if platformParameters}}
    {{#each platformParameters.parameters}}
    {{#unless (isConst this.type)}}
    public var {{camelcase this.name}}: {{typeFormat this}}{{#eq this.defaultValue null}}?{{/eq}}
    {{/unless}}
    {{/each}}
    {{/if}}
    
    public func makeOptions() -> [String: Any] {
        {{#isEmpty platformParameters.parameters~}}let{{else}}var{{~/isEmpty}} options: [String: Any] = [:]
        {{#if platformParameters}}
        {{#each platformParameters.parameters}}
        options["{{this.name}}"] = {{>variableValueFormat parameter=this}}
        {{/each}}
        {{/if}}
        return options
    }
    
    public init(
        {{~#if platformParameters~}}
        {{~#each platformParameters.parameters~}}
        {{~#unless (isConst this.type)~}}
        {{~camelcase this.name}}: {{typeFormat this~}}{{~#eq this.defaultValue null}}?{{/eq~}}
        {{~#if (isDefined this.defaultValue)}} = {{>defaultValueFormat parameter=this}}{{/if~}}
        {{~#unless @last}}, {{/unless~}}
        {{~/unless~}}
        {{~/each~}}
        {{~/if~}}
    ) {
        {{#if platformParameters}}
        {{#each platformParameters.parameters}}
        {{#unless (isConst this.type)}}
        self.{{camelcase this.name}} = {{camelcase this.name}}
        {{/unless}}
        {{/each}}
        {{/if}}
    }
}

public final class {{classname}} {
    public init(eventTracker: {{classname}}Tracker, globalParamsProvider: {{classname}}GlobalParamsProvider, platformParamsProvider: {{classname}}PlatformParamsProvider) {
        self.eventTracker = eventTracker
        self.globalParamsProvider = globalParamsProvider
        self.platformParamsProvider = platformParamsProvider
    }
    
    private let eventTracker: {{classname}}Tracker
    private let globalParamsProvider: {{classname}}GlobalParamsProvider
    private let platformParamsProvider: {{classname}}PlatformParamsProvider
    
    private func trackEvent(_ event: String, withOptions options: [String: Any]) {
        var mergedOptions = options
        let globalParams = globalParamsProvider.getGlobalParams()
        for (key, value) in globalParams.makeOptions() {
            assert(mergedOptions[key] == nil, "Global parameter conflicts with event parameter: \(key). Will be overwritten.")
            mergedOptions[key] = value
        }
        let platformParams = platformParamsProvider.getPlatformParams()
        for (key, value) in platformParams.makeOptions() {
            assert(mergedOptions[key] == nil, "Platform parameter conflicts with event parameter: \(key). Will be overwritten.")
            mergedOptions[key] = value
        }
        eventTracker.trackEvent(event, withOptions: mergedOptions)
    }
    
    private func makeMeta(_ event_version: Int, interfaces: [String: Any]) -> [String: Any] {
        var metaDict: [String: Any] = [:]
        var eventDict: [String: Any] = [:]
        eventDict["version"] = event_version
        metaDict["event"] = eventDict
        metaDict["interfaces"] = interfaces
        return metaDict
    }
    
    {{#filterTruthy this.namedEnums "type.Enum.name"}}
    {{#each this}}
    {{>enum parameter=this}}
    {{/each}}
    {{/filterTruthy}}
    {{#each eventNamespaces}}
    {{#each allVersions}}
    {{#filterFalsy this.parameters "type.Enum.name"}}
    {{#each this}}
    {{>enum parameter=this}}
    {{/each}}
    {{/filterFalsy}}
    {{#unless (isEmpty additionalNamespaces)}}
    public enum {{pascalcase this.name}}Namespaces{{#unless @root.onlyLastVersion}}{{#gt this.version 1}}V{{this.version}}{{/gt}}{{/unless}}: String {
    {{#each additionalNamespaces}}
        {{#if (isSpecialWord (camelcase this))}}
        case `{{camelcase this}}` = "{{this}}"
        {{else}}
        case {{camelcase this}} = "{{this}}"
        {{/if}}
    {{/each}}
    }

    {{/unless}}
    /**
    {{#each (splitByNewLine description)}}
     *  {{this}}
    {{/each}}
    {{#if comment}}
     *
    {{/if}}
    {{#each (splitByNewLine comment)}}
     *  {{this}}
    {{/each}}
     *
    {{#filterFalsy parameters 'type.Const'}}
    {{#each this}}
     *  {{sum @index 1}}. {{name}} - {{description}}
    {{/each}}
    {{/filterFalsy}}
     */
    public func {{camelcase this.name}}{{#gt this.version 1}}V{{this.version}}{{/gt}}(
        {{~#unless (isEmpty additionalNamespaces)}}namespace: {{pascalcase this.name}}Namespaces{{#gt this.version 1}}V{{this.version}}{{/gt}}, {{/unless~}}
        {{~#filterUndefined this.parameters 'type.Const'~}}
            {{~#each this~}}
                {{~camelcase this.name}}: {{typeFormat this~}}{{~#eq this.defaultValue null}}?{{/eq~}}
                {{~#if (isDefined this.defaultValue)}} = {{>defaultValueFormat parameter=this}}{{/if~}}
                {{~#unless @last}}, {{/unless~}}
            {{~/each~}}
        {{~/filterUndefined~}}
    ) {
        var options: [String: Any] = [:]
        {{#each this.parameters}}
        {{#eq this.type 'Bool'}}
        if {{camelcase this.name}} {
            options["{{this.name}}"] = "true"
        } else {
            options["{{this.name}}"] = "false"
        }
        {{else}}
        options["{{this.name}}"] = {{>variableValueFormat parameter=this}}
        {{/eq}}
        {{/each}}
        {{#if (isEmpty this.interfaces)}}let{{else}}var{{/if}} interfacesDict: [String: Any] = [:]
        {{#each this.interfaces}}
        var {{camelcase @key}}: [String: Any] = [:]
        {{camelcase @key}}["version"] = {{this}}
        interfacesDict["{{@key}}"] = {{camelcase @key}}
        {{/each}}
        let _meta = makeMeta({{this.version}}, interfaces: interfacesDict)
        options["_meta"] = _meta
        trackEvent({{#unless (isEmpty additionalNamespaces)}}namespace.rawValue + "." + {{/unless}}"{{this.event}}", withOptions: options)
    }

    {{/each}}
    {{/each}}
}
