{{#each eventNamespaces}}
#start-file:{{snakecase this.name}}.ts
/**
 *  AUTO-GENERATED FILE. DO NOT MODIFY
 *  This class was automatically generated.
 */
// eslint-disable

import { {{~@root.classname~}} } from "./{{snakecase @root.classname}}"
import {makeMetaParams} from "./{{snakecase @root.classname}}"

{{#filterTruthy this.namedEnums "type.Enum.name" }}
{{#if this}}
import { {{~join (sort (pluck this "type.Enum.name"))~}} } from "./named_enums"
{{/if}}

{{/filterTruthy}}
{{#each allVersions}}
{{#filterFalsy this.parameters "type.Enum.name"}}
{{#each this}}
{{>enum parameter=this}}
{{/each}}
{{/filterFalsy}}
{{#unless (isEmpty additionalNamespaces)}}
export enum {{pascalcase this.name}}Namespaces{{#unless @root.onlyLastVersion}}{{#gt this.version 1}}V{{this.version}}{{/gt}}{{/unless}} {
    {{#each additionalNamespaces}}
    {{pascalcase this}} = '{{this}}',
    {{/each}}
}

{{/unless}}
/**
 * {{this.description}}
 *
    {{#each this.parameters}}
 *  {{@index}}. {{this.name}} {{#if (isConst this.type)}}[const] {{/if}}- {{this.description}}
    {{/each}}
 */
export type {{pascalcase this.name}}Parameters{{#unless @root.onlyLastVersion}}{{#gt this.version 1}}V{{this.version}}{{/gt}}{{/unless}} = {
    {{#filterFalsy this.parameters "type.Const"}}
    {{#each this}}
    {{camelcase this.name}}{{#if (isDefined this.defaultValue)}}?{{/if}}: {{typeFormat this}};
    {{/each}}
    {{/filterFalsy}}
};
export function {{camelcase this.name}}{{#unless @root.onlyLastVersion}}{{#gt this.version 1}}V{{this.version}}{{/gt}}{{/unless}} (
    {{snakecase @root.classname}}: {{@root.classname}},{{#unless (isEmpty additionalNamespaces)}}
    namespace: {{pascalcase this.name}}Namespaces{{#unless @root.onlyLastVersion}}{{#gt this.version 1}}V{{this.version}}{{/gt}}{{/unless}},{{/unless}}
    {{#unless (isEmpty (filterFalsy this.parameters 'type.Const'))}}
    parameters: {{pascalcase this.name}}Parameters{{#unless @root.onlyLastVersion}}{{#gt this.version 1}}V{{this.version}}{{/gt}}{{/unless}}
    {{/unless}}
) {
    {{#if this.parameters}}
    {{#filterDefined this.parameters 'defaultValue'}}
    {{#if this}}
    const {
        {{#each this}}
        {{camelcase this.name}} = {{>defaultValueFormat parameter=this }},
        {{/each}}
    } = parameters;

    {{/if}}
    {{/filterDefined}}
    {{#filterTruthy this.parameters 'type.Const'}}
    {{#each this}}
    const {{camelcase this.name}} = '{{this.type.Const}}';
    {{/each}}
    {{/filterTruthy}}
    {{/if}}

    {{#unless (isEmpty this.interfaces)}}
    const interfaces = {
        {{#each this.interfaces}}
        {{camelcase @key}}: {
            version: {{this}}
        },
        {{/each}}
    }
    {{/unless}}
    const _meta = makeMetaParams(
        {{~this.version~}}
        {{~#unless (isEmpty this.interfaces)~}}
        , interfaces
        {{~/unless~}}
    )
    const enhancedParams = { 
        {{~#if this.parameters~}}
        {{~#unless (isEmpty (filterFalsy this.parameters 'type.Const'))~}}...parameters, {{/unless~}}
        {{~#filterDefined this.parameters 'defaultValue'~}}
        {{~#each this}}{{camelcase this.name}}, {{/each}}
        {{~/filterDefined~}}
        {{~#filterTruthy this.parameters 'type.Const'~}}
        {{~#each this}}{{camelcase this.name}}, {{/each}}
        {{~/filterTruthy~}}
        {{~/if~}}
        _meta}
    {{snakecase @root.classname}}.trackEvent({{#unless (isEmpty additionalNamespaces)}}`${namespace}.{{this.event}}`{{else}}"{{this.event}}"{{/unless}}, enhancedParams);
}

{{/each}}

#end-file
{{/each}}
